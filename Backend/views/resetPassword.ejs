<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Reset Password - BrainQuest</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/framer-motion/10.16.4/framer-motion.min.js"></script>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
          Oxygen, Ubuntu, Cantarell, sans-serif;
        min-height: 100vh;
        background: linear-gradient(135deg, #1a1f37 0%, #2c3250 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 1rem;
        position: relative;
        overflow: hidden;
      }

      /* Background Effects */
      body::before {
        content: "";
        position: absolute;
        top: -50%;
        left: -50%;
        width: 100%;
        height: 100%;
        background: linear-gradient(
          135deg,
          rgba(255, 193, 7, 0.2) 0%,
          transparent 100%
        );
        border-radius: 50%;
        filter: blur(60px);
        transform: rotate(12deg);
        opacity: 0.2;
        z-index: -1;
      }

      body::after {
        content: "";
        position: absolute;
        bottom: -50%;
        right: -50%;
        width: 100%;
        height: 100%;
        background: linear-gradient(
          315deg,
          rgba(255, 152, 0, 0.2) 0%,
          transparent 100%
        );
        border-radius: 50%;
        filter: blur(60px);
        transform: rotate(-12deg);
        opacity: 0.2;
        z-index: -1;
      }

      .container {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(20px);
        border-radius: 24px;
        box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.2);
        padding: 3rem;
        width: 100%;
        max-width: 480px;
        position: relative;
        animation: slideUp 0.6s ease-out;
      }

      @keyframes slideUp {
        from {
          opacity: 0;
          transform: translateY(30px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .logo {
        text-align: center;
        margin-bottom: 2rem;
      }

      .logo h1 {
        color: #ffc107;
        font-size: 2.5rem;
        font-weight: 800;
        margin-bottom: 0.5rem;
        text-shadow: 0 2px 10px rgba(255, 193, 7, 0.3);
      }

      .logo p {
        color: rgba(255, 255, 255, 0.7);
        font-size: 0.9rem;
      }

      .form-header {
        text-align: center;
        margin-bottom: 2rem;
      }

      .form-header h2 {
        color: white;
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
      }

      .form-header p {
        color: rgba(255, 255, 255, 0.7);
        font-size: 0.95rem;
      }

      .form-group {
        margin-bottom: 1.5rem;
        position: relative;
      }

      .form-group label {
        display: block;
        color: rgba(255, 255, 255, 0.9);
        margin-bottom: 0.5rem;
        font-weight: 500;
        font-size: 0.9rem;
      }

      .input-wrapper {
        position: relative;
        group: focus-within;
      }

      .input-icon {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: rgba(255, 255, 255, 0.4);
        transition: color 0.3s ease;
        z-index: 2;
      }

      .form-group input:focus + .input-icon,
      .form-group input:focus ~ .input-icon {
        color: #ffc107;
      }

      .form-group input {
        width: 100%;
        padding: 12px 12px 12px 45px;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        color: white;
        font-size: 1rem;
        outline: none;
        transition: all 0.3s ease;
      }

      .form-group input::placeholder {
        color: rgba(255, 255, 255, 0.4);
      }

      .form-group input:focus {
        border-color: rgba(255, 193, 7, 0.5);
        box-shadow: 0 0 0 3px rgba(255, 193, 7, 0.1);
        background: rgba(255, 255, 255, 0.08);
      }

      .toggle-password {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: rgba(255, 255, 255, 0.4);
        cursor: pointer;
        padding: 4px;
        transition: color 0.3s ease;
      }

      .toggle-password:hover {
        color: white;
      }

      .submit-btn {
        width: 100%;
        padding: 14px;
        background: linear-gradient(135deg, #ffc107 0%, #ff9800 100%);
        border: none;
        border-radius: 12px;
        color: #1a1f37;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
      }

      .submit-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(255, 193, 7, 0.3);
      }

      .submit-btn:active {
        transform: translateY(0);
      }

      .submit-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
      }

      .loading-spinner {
        display: none;
        width: 20px;
        height: 20px;
        border: 2px solid #1a1f37;
        border-top: 2px solid transparent;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-right: 8px;
      }

      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }

      .message {
        margin-top: 1.5rem;
        padding: 1rem;
        border-radius: 12px;
        text-align: center;
        font-weight: 500;
        display: none;
        animation: fadeIn 0.3s ease-out;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .message.success {
        background: rgba(76, 175, 80, 0.2);
        border: 1px solid rgba(76, 175, 80, 0.3);
        color: #81c784;
      }

      .message.error {
        background: rgba(244, 67, 54, 0.2);
        border: 1px solid rgba(244, 67, 54, 0.3);
        color: #e57373;
      }

      .password-requirements {
        margin-top: 0.5rem;
        font-size: 0.8rem;
        color: rgba(255, 255, 255, 0.6);
      }

      .requirement {
        display: flex;
        align-items: center;
        margin: 0.2rem 0;
        transition: color 0.3s ease;
      }

      .requirement.valid {
        color: #81c784;
      }

      .requirement .check {
        margin-right: 0.5rem;
        font-size: 0.7rem;
      }

      @media (max-width: 480px) {
        .container {
          padding: 2rem 1.5rem;
          margin: 1rem;
        }

        .logo h1 {
          font-size: 2rem;
        }

        .form-header h2 {
          font-size: 1.5rem;
        }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <!-- Logo/Brand -->
      <div class="logo">
        <h1>BrainQuest</h1>
        <p>Learn • Challenge • Excel</p>
      </div>

      <!-- Form Header -->
      <div class="form-header">
        <h2>Reset Your Password</h2>
        <p>Enter your new password below to complete the reset process</p>
      </div>

      <!-- Reset Password Form -->
      <form id="resetForm" method="POST">
        <div class="form-group">
          <label for="password">New Password</label>
          <div class="input-wrapper">
            <input
              type="password"
              id="password"
              name="password"
              placeholder="Enter new password"
              required
            />
            <svg
              class="input-icon"
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
              <circle cx="12" cy="16" r="1"></circle>
              <path d="m7 11V7a5 5 0 0 1 10 0v4"></path>
            </svg>
            <button
              type="button"
              class="toggle-password"
              data-target="password"
            >
              <svg
                class="eye-open"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              >
                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                <circle cx="12" cy="12" r="3"></circle>
              </svg>
              <svg
                class="eye-closed"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                style="display: none"
              >
                <path d="m15 18-.722-3.25"></path>
                <path d="m2 2 20 20"></path>
                <path d="m9 9-.722-3.25"></path>
                <path d="M3.604 7.197l7.138 6.61"></path>
                <path d="m10.5 15.5 6-6"></path>
                <path d="m15 9-.722-3.25"></path>
              </svg>
            </button>
          </div>
          <div class="password-requirements">
            <div class="requirement" id="req-length">
              <span class="check">•</span>
              <span>At least 8 characters</span>
            </div>
            <div class="requirement" id="req-uppercase">
              <span class="check">•</span>
              <span>One uppercase letter</span>
            </div>
            <div class="requirement" id="req-lowercase">
              <span class="check">•</span>
              <span>One lowercase letter</span>
            </div>
            <div class="requirement" id="req-number">
              <span class="check">•</span>
              <span>One number</span>
            </div>
          </div>
        </div>

        <div class="form-group">
          <label for="confirmPassword">Confirm Password</label>
          <div class="input-wrapper">
            <input
              type="password"
              id="confirmPassword"
              name="confirmPassword"
              placeholder="Confirm new password"
              required
            />
            <svg
              class="input-icon"
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
              <circle cx="12" cy="16" r="1"></circle>
              <path d="m7 11V7a5 5 0 0 1 10 0v4"></path>
            </svg>
            <button
              type="button"
              class="toggle-password"
              data-target="confirmPassword"
            >
              <svg
                class="eye-open"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              >
                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                <circle cx="12" cy="12" r="3"></circle>
              </svg>
              <svg
                class="eye-closed"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                style="display: none"
              >
                <path d="m15 18-.722-3.25"></path>
                <path d="m2 2 20 20"></path>
                <path d="m9 9-.722-3.25"></path>
                <path d="M3.604 7.197l7.138 6.61"></path>
                <path d="m10.5 15.5 6-6"></path>
                <path d="m15 9-.722-3.25"></path>
              </svg>
            </button>
          </div>
        </div>

        <button type="submit" class="submit-btn">
          <div class="loading-spinner"></div>
          <span class="btn-text">Reset Password</span>
        </button>
      </form>

      <!-- Message Display -->
      <div id="message" class="message"></div>
    </div>

    <script>
      // Get token from URL (assuming it's passed as a query parameter or in the path)
      const token =
        "<%= token %>" ||
        new URLSearchParams(window.location.search).get("token") ||
        window.location.pathname.split("/").pop();

      // Password validation
      const passwordInput = document.getElementById("password");
      const confirmPasswordInput = document.getElementById("confirmPassword");
      const requirements = {
        length: /^.{8,}$/,
        uppercase: /[A-Z]/,
        lowercase: /[a-z]/,
        number: /\d/,
      };

      function validatePassword(password) {
        const validations = {
          length: requirements.length.test(password),
          uppercase: requirements.uppercase.test(password),
          lowercase: requirements.lowercase.test(password),
          number: requirements.number.test(password),
        };

        Object.keys(validations).forEach((key) => {
          const element = document.getElementById(`req-${key}`);
          if (validations[key]) {
            element.classList.add("valid");
            element.querySelector(".check").textContent = "✓";
          } else {
            element.classList.remove("valid");
            element.querySelector(".check").textContent = "•";
          }
        });

        return Object.values(validations).every(Boolean);
      }

      passwordInput.addEventListener("input", (e) => {
        validatePassword(e.target.value);
      });

      // Toggle password visibility
      document.querySelectorAll(".toggle-password").forEach((button) => {
        button.addEventListener("click", () => {
          const targetId = button.getAttribute("data-target");
          const input = document.getElementById(targetId);
          const eyeOpen = button.querySelector(".eye-open");
          const eyeClosed = button.querySelector(".eye-closed");

          if (input.type === "password") {
            input.type = "text";
            eyeOpen.style.display = "none";
            eyeClosed.style.display = "block";
          } else {
            input.type = "password";
            eyeOpen.style.display = "block";
            eyeClosed.style.display = "none";
          }
        });
      });

      // Form submission
      document
        .getElementById("resetForm")
        .addEventListener("submit", async (e) => {
          e.preventDefault();

          const password = passwordInput.value;
          const confirmPassword = confirmPasswordInput.value;
          const messageDiv = document.getElementById("message");
          const submitBtn = document.querySelector(".submit-btn");
          const spinner = document.querySelector(".loading-spinner");
          const btnText = document.querySelector(".btn-text");

          // Clear previous messages
          messageDiv.style.display = "none";
          messageDiv.className = "message";

          // Validate passwords
          if (!validatePassword(password)) {
            showMessage(
              "Please ensure your password meets all requirements.",
              "error"
            );
            return;
          }

          if (password !== confirmPassword) {
            showMessage("Passwords do not match. Please try again.", "error");
            return;
          }

          // Show loading state
          submitBtn.disabled = true;
          spinner.style.display = "inline-block";
          btnText.textContent = "Resetting Password...";

          try {
            const response = await fetch(
              `http://localhost:4000/users/reset-password/${token}`,
              {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  password: password,
                  confirmPassword: confirmPassword,
                }),
              }
            );

            const data = await response.json();

            if (response.ok) {
              showMessage(
                "Password reset successful! You can now sign in with your new password.",
                "success"
              );
            } else {
              showMessage(
                data.message || "Failed to reset password. Please try again.",
                "error"
              );
            }
          } catch (error) {
            showMessage(
              "Network error. Please check your connection and try again.",
              "error"
            );
          } finally {
            // Reset button state
            submitBtn.disabled = false;
            spinner.style.display = "none";
            btnText.textContent = "Reset Password";
          }
        });

      function showMessage(text, type) {
        const messageDiv = document.getElementById("message");
        messageDiv.textContent = text;
        messageDiv.className = `message ${type}`;
        messageDiv.style.display = "block";
      }

      // Initialize form validation on page load
      document.addEventListener("DOMContentLoaded", () => {
        if (passwordInput.value) {
          validatePassword(passwordInput.value);
        }
      });
    </script>
  </body>
</html>
